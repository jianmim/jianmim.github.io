import{k as _,L as A,t as a,x as S,M as v,D as t,A as n,O as e,S as l,X as w,Y as x}from"./store-dof5ccn5.js";import{_ as D}from"./_plugin-vue_export-helper-x3n3nnut.js";const i=s=>(w("data-v-185fa65d"),s=s(),x(),s),y={class:"sys-open-access-container"},H={style:{color:"#fff"}},V=i(()=>e("span",null," 说明 ",-1)),k={class:"text-content"},C=i(()=>e("h2",null,"OpenAPI 使用",-1)),I=i(()=>e("li",null,[l(" 通过对请求的签名，可以达到以下目的： "),e("ul",null,[e("li",null,"免登录识别访问接口用户的身份"),e("li",null,"防止潜在的重放攻击")])],-1)),B=i(()=>e("h2",null,"OpenAPI 签名流程",-1)),M=i(()=>e("h3",null,"公共请求参数",-1)),O=i(()=>e("p",null,"在原始请求的基础上添加 Header 请求参数",-1)),z=i(()=>e("h3",null,"计算签名",-1)),N={class:"el-alert el-alert--info is-light"},b=_({name:"sysOpenAccessHelpView"}),E=_({...b,setup(s,{expose:d}){const c=A({isShowDialog:!1});return d({openDialog:()=>{c.isShowDialog=!0}}),(J,u)=>{const p=a("ele-QuestionFilled"),h=a("el-icon"),o=a("el-tag"),f=a("el-divider"),r=a("el-link"),m=a("el-dialog");return S(),v("div",y,[t(m,{modelValue:c.isShowDialog,"onUpdate:modelValue":u[0]||(u[0]=g=>c.isShowDialog=g),draggable:"","close-on-click-modal":!1,width:"900px"},{header:n(()=>[e("div",H,[t(h,{size:"16",style:{"margin-right":"3px",display:"inline","vertical-align":"middle"}},{default:n(()=>[t(p)]),_:1}),V])]),default:n(()=>[e("div",k,[C,e("ul",null,[e("li",null,[l(" 在需要使用 Signature 身份验证的 Api 中贴上 "),e("p",null,[t(o,null,{default:n(()=>[l("[Authorize(AuthenticationSchemes = SignatureAuthenticationDefaults.AuthenticationScheme)]")]),_:1})])]),e("li",null,[l(" 如果 Api 需要保留 Jwt 方式的身份验证，可贴上 "),e("p",null,[t(o,null,{default:n(()=>[l('[Authorize(AuthenticationSchemes = JwtBearerDefaults.AuthenticationScheme + "," + SignatureAuthenticationDefaults.AuthenticationScheme)]')]),_:1})])]),I]),t(f),B,l(" 客户端在请求时，需要按照如下步骤生成签名 Signature，并添加公共参数： "),M,O,e("ul",null,[e("li",null,[t(o,{effect:"plain"},{default:n(()=>[l("accessKey")]),_:1}),l("：身份标识")]),e("li",null,[t(o,{effect:"plain"},{default:n(()=>[l("timestamp")]),_:1}),l("：时间戳，精确到秒")]),e("li",null,[t(o,{effect:"plain"},{default:n(()=>[l("nonce")]),_:1}),l("：唯一随机数，建议为一个6位的随机数")]),e("li",null,[t(o,{effect:"plain"},{default:n(()=>[l("sign")]),_:1}),l("：签名数据（见“计算签名”部分）")])]),z,e("ul",null,[e("li",null,[l(" 按照如下顺序对请求中的参数进行排序，各个参数通过&进行拼接（中间不含空格）： "),e("p",null,[t(o,null,{default:n(()=>[l("method & url & accessKey & timestamp & nonce")]),_:1})]),e("ul",null,[e("li",null,[t(o,{effect:"plain"},{default:n(()=>[l("method")]),_:1}),l(" 需要大写，如：GET")]),e("li",null,[t(o,{effect:"plain"},{default:n(()=>[l("url")]),_:1}),l(" 去除协议、域名、参数，以 / 开头，如：/api/demo/helloWord")])])]),e("li",null,[l("使用 HMAC-SHA256 协议创建基于哈希的消息身份验证代码 (HMAC)，以 "),t(o,{effect:"plain"},{default:n(()=>[l("accessSecret")]),_:1}),l(" 作为密钥，对上面拼接的参数进行计算签名，所得签名进行 Base-64 编码")])])]),e("div",N,[l(" HMAC-SHA256 在线计算： "),t(r,{href:"https://1024tools.com/hmac",target:"_blank",type:"primary"},{default:n(()=>[l("https://1024tools.com/hmac")]),_:1})])]),_:1},8,["modelValue"])])}}}),Q=D(E,[["__scopeId","data-v-185fa65d"]]);export{Q as default};

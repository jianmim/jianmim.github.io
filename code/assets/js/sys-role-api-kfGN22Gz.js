import{b as S}from"./store-dof5ccn5.js";import{B as u,d as R,R as P}from"./index-xdJ7pE-g.js";const m=function(a){return{apiSysRoleAddPost:async(e,s={})=>{const o="/api/sysRole/add",t=new URL(o,"https://example.com");let r;a&&(r=a.baseOptions);const c={method:"POST",...r,...s},l={},h={};if(a&&a.accessToken){const n=typeof a.accessToken=="function"?await a.accessToken():await a.accessToken;l.Authorization="Bearer "+n}l["Content-Type"]="application/json-patch+json";const i=new URLSearchParams(t.search);for(const n in h)i.set(n,h[n]);for(const n in s.params)i.set(n,s.params[n]);t.search=new URLSearchParams(i).toString();let p=r&&r.headers?r.headers:{};c.headers={...l,...p,...s.headers};const y=typeof e!="string"||c.headers["Content-Type"]==="application/json";return c.data=y?JSON.stringify(e!==void 0?e:{}):e||"",{url:t.pathname+t.search+t.hash,options:c}},apiSysRoleDeletePost:async(e,s={})=>{const o="/api/sysRole/delete",t=new URL(o,"https://example.com");let r;a&&(r=a.baseOptions);const c={method:"POST",...r,...s},l={},h={};if(a&&a.accessToken){const n=typeof a.accessToken=="function"?await a.accessToken():await a.accessToken;l.Authorization="Bearer "+n}l["Content-Type"]="application/json-patch+json";const i=new URLSearchParams(t.search);for(const n in h)i.set(n,h[n]);for(const n in s.params)i.set(n,s.params[n]);t.search=new URLSearchParams(i).toString();let p=r&&r.headers?r.headers:{};c.headers={...l,...p,...s.headers};const y=typeof e!="string"||c.headers["Content-Type"]==="application/json";return c.data=y?JSON.stringify(e!==void 0?e:{}):e||"",{url:t.pathname+t.search+t.hash,options:c}},apiSysRoleGrantDataScopePost:async(e,s={})=>{const o="/api/sysRole/grantDataScope",t=new URL(o,"https://example.com");let r;a&&(r=a.baseOptions);const c={method:"POST",...r,...s},l={},h={};if(a&&a.accessToken){const n=typeof a.accessToken=="function"?await a.accessToken():await a.accessToken;l.Authorization="Bearer "+n}l["Content-Type"]="application/json-patch+json";const i=new URLSearchParams(t.search);for(const n in h)i.set(n,h[n]);for(const n in s.params)i.set(n,s.params[n]);t.search=new URLSearchParams(i).toString();let p=r&&r.headers?r.headers:{};c.headers={...l,...p,...s.headers};const y=typeof e!="string"||c.headers["Content-Type"]==="application/json";return c.data=y?JSON.stringify(e!==void 0?e:{}):e||"",{url:t.pathname+t.search+t.hash,options:c}},apiSysRoleGrantMenuPost:async(e,s={})=>{const o="/api/sysRole/grantMenu",t=new URL(o,"https://example.com");let r;a&&(r=a.baseOptions);const c={method:"POST",...r,...s},l={},h={};if(a&&a.accessToken){const n=typeof a.accessToken=="function"?await a.accessToken():await a.accessToken;l.Authorization="Bearer "+n}l["Content-Type"]="application/json-patch+json";const i=new URLSearchParams(t.search);for(const n in h)i.set(n,h[n]);for(const n in s.params)i.set(n,s.params[n]);t.search=new URLSearchParams(i).toString();let p=r&&r.headers?r.headers:{};c.headers={...l,...p,...s.headers};const y=typeof e!="string"||c.headers["Content-Type"]==="application/json";return c.data=y?JSON.stringify(e!==void 0?e:{}):e||"",{url:t.pathname+t.search+t.hash,options:c}},apiSysRoleListGet:async(e={})=>{const s="/api/sysRole/list",o=new URL(s,"https://example.com");let t;a&&(t=a.baseOptions);const r={method:"GET",...t,...e},c={},l={};if(a&&a.accessToken){const p=typeof a.accessToken=="function"?await a.accessToken():await a.accessToken;c.Authorization="Bearer "+p}const h=new URLSearchParams(o.search);for(const p in l)h.set(p,l[p]);for(const p in e.params)h.set(p,e.params[p]);o.search=new URLSearchParams(h).toString();let i=t&&t.headers?t.headers:{};return r.headers={...c,...i,...e.headers},{url:o.pathname+o.search+o.hash,options:r}},apiSysRoleOwnMenuListGet:async(e,s,o={})=>{if(e==null)throw new P("id","Required parameter id was null or undefined when calling apiSysRoleOwnMenuListGet.");const t="/api/sysRole/ownMenuList",r=new URL(t,"https://example.com");let c;a&&(c=a.baseOptions);const l={method:"GET",...c,...o},h={},i={};if(a&&a.accessToken){const n=typeof a.accessToken=="function"?await a.accessToken():await a.accessToken;h.Authorization="Bearer "+n}s!==void 0&&(i.Status=s),e!==void 0&&(i.Id=e);const p=new URLSearchParams(r.search);for(const n in i)p.set(n,i[n]);for(const n in o.params)p.set(n,o.params[n]);r.search=new URLSearchParams(p).toString();let y=c&&c.headers?c.headers:{};return l.headers={...h,...y,...o.headers},{url:r.pathname+r.search+r.hash,options:l}},apiSysRoleOwnOrgListGet:async(e,s,o={})=>{if(e==null)throw new P("id","Required parameter id was null or undefined when calling apiSysRoleOwnOrgListGet.");const t="/api/sysRole/ownOrgList",r=new URL(t,"https://example.com");let c;a&&(c=a.baseOptions);const l={method:"GET",...c,...o},h={},i={};if(a&&a.accessToken){const n=typeof a.accessToken=="function"?await a.accessToken():await a.accessToken;h.Authorization="Bearer "+n}s!==void 0&&(i.Status=s),e!==void 0&&(i.Id=e);const p=new URLSearchParams(r.search);for(const n in i)p.set(n,i[n]);for(const n in o.params)p.set(n,o.params[n]);r.search=new URLSearchParams(p).toString();let y=c&&c.headers?c.headers:{};return l.headers={...h,...y,...o.headers},{url:r.pathname+r.search+r.hash,options:l}},apiSysRolePagePost:async(e,s={})=>{const o="/api/sysRole/page",t=new URL(o,"https://example.com");let r;a&&(r=a.baseOptions);const c={method:"POST",...r,...s},l={},h={};if(a&&a.accessToken){const n=typeof a.accessToken=="function"?await a.accessToken():await a.accessToken;l.Authorization="Bearer "+n}l["Content-Type"]="application/json-patch+json";const i=new URLSearchParams(t.search);for(const n in h)i.set(n,h[n]);for(const n in s.params)i.set(n,s.params[n]);t.search=new URLSearchParams(i).toString();let p=r&&r.headers?r.headers:{};c.headers={...l,...p,...s.headers};const y=typeof e!="string"||c.headers["Content-Type"]==="application/json";return c.data=y?JSON.stringify(e!==void 0?e:{}):e||"",{url:t.pathname+t.search+t.hash,options:c}},apiSysRoleSetStatusPost:async(e,s={})=>{const o="/api/sysRole/setStatus",t=new URL(o,"https://example.com");let r;a&&(r=a.baseOptions);const c={method:"POST",...r,...s},l={},h={};if(a&&a.accessToken){const n=typeof a.accessToken=="function"?await a.accessToken():await a.accessToken;l.Authorization="Bearer "+n}l["Content-Type"]="application/json-patch+json";const i=new URLSearchParams(t.search);for(const n in h)i.set(n,h[n]);for(const n in s.params)i.set(n,s.params[n]);t.search=new URLSearchParams(i).toString();let p=r&&r.headers?r.headers:{};c.headers={...l,...p,...s.headers};const y=typeof e!="string"||c.headers["Content-Type"]==="application/json";return c.data=y?JSON.stringify(e!==void 0?e:{}):e||"",{url:t.pathname+t.search+t.hash,options:c}},apiSysRoleUpdatePost:async(e,s={})=>{const o="/api/sysRole/update",t=new URL(o,"https://example.com");let r;a&&(r=a.baseOptions);const c={method:"POST",...r,...s},l={},h={};if(a&&a.accessToken){const n=typeof a.accessToken=="function"?await a.accessToken():await a.accessToken;l.Authorization="Bearer "+n}l["Content-Type"]="application/json-patch+json";const i=new URLSearchParams(t.search);for(const n in h)i.set(n,h[n]);for(const n in s.params)i.set(n,s.params[n]);t.search=new URLSearchParams(i).toString();let p=r&&r.headers?r.headers:{};c.headers={...l,...p,...s.headers};const y=typeof e!="string"||c.headers["Content-Type"]==="application/json";return c.data=y?JSON.stringify(e!==void 0?e:{}):e||"",{url:t.pathname+t.search+t.hash,options:c}}}},d=function(a){return{async apiSysRoleAddPost(e,s){const o=await m(a).apiSysRoleAddPost(e,s);return(t=S,r=R)=>{const c={...o.options,url:r+o.url};return t.request(c)}},async apiSysRoleDeletePost(e,s){const o=await m(a).apiSysRoleDeletePost(e,s);return(t=S,r=R)=>{const c={...o.options,url:r+o.url};return t.request(c)}},async apiSysRoleGrantDataScopePost(e,s){const o=await m(a).apiSysRoleGrantDataScopePost(e,s);return(t=S,r=R)=>{const c={...o.options,url:r+o.url};return t.request(c)}},async apiSysRoleGrantMenuPost(e,s){const o=await m(a).apiSysRoleGrantMenuPost(e,s);return(t=S,r=R)=>{const c={...o.options,url:r+o.url};return t.request(c)}},async apiSysRoleListGet(e){const s=await m(a).apiSysRoleListGet(e);return(o=S,t=R)=>{const r={...s.options,url:t+s.url};return o.request(r)}},async apiSysRoleOwnMenuListGet(e,s,o){const t=await m(a).apiSysRoleOwnMenuListGet(e,s,o);return(r=S,c=R)=>{const l={...t.options,url:c+t.url};return r.request(l)}},async apiSysRoleOwnOrgListGet(e,s,o){const t=await m(a).apiSysRoleOwnOrgListGet(e,s,o);return(r=S,c=R)=>{const l={...t.options,url:c+t.url};return r.request(l)}},async apiSysRolePagePost(e,s){const o=await m(a).apiSysRolePagePost(e,s);return(t=S,r=R)=>{const c={...o.options,url:r+o.url};return t.request(c)}},async apiSysRoleSetStatusPost(e,s){const o=await m(a).apiSysRoleSetStatusPost(e,s);return(t=S,r=R)=>{const c={...o.options,url:r+o.url};return t.request(c)}},async apiSysRoleUpdatePost(e,s){const o=await m(a).apiSysRoleUpdatePost(e,s);return(t=S,r=R)=>{const c={...o.options,url:r+o.url};return t.request(c)}}}};class T extends u{async apiSysRoleAddPost(e,s){return d(this.configuration).apiSysRoleAddPost(e,s).then(o=>o(this.axios,this.basePath))}async apiSysRoleDeletePost(e,s){return d(this.configuration).apiSysRoleDeletePost(e,s).then(o=>o(this.axios,this.basePath))}async apiSysRoleGrantDataScopePost(e,s){return d(this.configuration).apiSysRoleGrantDataScopePost(e,s).then(o=>o(this.axios,this.basePath))}async apiSysRoleGrantMenuPost(e,s){return d(this.configuration).apiSysRoleGrantMenuPost(e,s).then(o=>o(this.axios,this.basePath))}async apiSysRoleListGet(e){return d(this.configuration).apiSysRoleListGet(e).then(s=>s(this.axios,this.basePath))}async apiSysRoleOwnMenuListGet(e,s,o){return d(this.configuration).apiSysRoleOwnMenuListGet(e,s,o).then(t=>t(this.axios,this.basePath))}async apiSysRoleOwnOrgListGet(e,s,o){return d(this.configuration).apiSysRoleOwnOrgListGet(e,s,o).then(t=>t(this.axios,this.basePath))}async apiSysRolePagePost(e,s){return d(this.configuration).apiSysRolePagePost(e,s).then(o=>o(this.axios,this.basePath))}async apiSysRoleSetStatusPost(e,s){return d(this.configuration).apiSysRoleSetStatusPost(e,s).then(o=>o(this.axios,this.basePath))}async apiSysRoleUpdatePost(e,s){return d(this.configuration).apiSysRoleUpdatePost(e,s).then(o=>o(this.axios,this.basePath))}}export{T as S};
